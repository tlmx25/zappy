/**
 * \mainpage Zappy Project Documentation
 *
 * \section intro_sec Introduction
 *
 * Welcome to the Zappy Project documentation. This project is a tribute to Zaphod Beeblebrox
 * and involves creating a network game where several teams confront each other on a tile map
 * containing resources. The goal of the game is for the first team to have at least six players
 * reach the maximum elevation.
 *
 * \section components_sec Project Components
 *
 * The project consists of three main binaries:
 * - `zappy_server`: The server written in C that generates the inhabitants' world.
 * - `zappy_gui`: The graphical client written in C++ to visualize the world.
 * - `zappy_ai`: The AI client that drives an inhabitant through commands sent to the server.
 *
 * Each of these components has specific build rules defined in the Makefile.
 *
 * \section environment_sec Environment
 *
 * The game takes place in a world called Trantor, which is made of zero-relief planes. The game
 * board represents the entire surface of this world, with a wrap-around effect at the edges.
 *
 * \subsection resources_subsec Resources
 *
 * The environment is rich in resources, including:
 * - Linemate
 * - Deraumere
 * - Sibur
 * - Mendiane
 * - Phiras
 * - Thystame
 *
 * These resources are spawned by the server upon starting and at regular intervals.
 *
 * \subsection activities_subsec Activities
 *
 * The inhabitants of Trantor focus on two main activities:
 * - Feeding themselves
 * - Collecting stones
 *
 * These activities are crucial for the elevation ritual, which is an important part of the game.
 *
 * \section elevation_sec Elevation Ritual
 *
 * The goal for players is to rise in the Trantorian hierarchy by performing the elevation ritual.
 * This involves gathering specific resources and having a certain number of players of the same
 * level on the same tile. Successful elevation enhances the players' capacities and advances them
 * to the next level.
 *
 * \section vision_sec Vision
 *
 * Players' field of vision increases with each level of elevation. The `look` command allows
 * players to see the objects and players on the tiles around them.
 *
 * \section communication_sec Communication
 *
 * The AI clients communicate with the server using TCP sockets, and the commands are sent as
 * character strings ending with a newline. The server responds with confirmation messages for
 * each action.
 *
 * \section gui_sec Graphical User Interface
 *
 * The graphical client provides a 2D (or optionally 3D) visualization of the world, using icons
 * to represent various elements. The GUI communicates with the server and updates the visualization
 * based on the game's state.
 *
 * \section commands_sec Commands
 *
 * Players can perform various actions such as moving, turning, looking around, broadcasting
 * messages, and performing the elevation ritual. These commands are transmitted through the server
 * and must follow the defined protocol.
 *
 * \section reproduction_sec Player Reproduction
 *
 * Players can reproduce by laying eggs, which allows new clients to connect and join the game.
 *
 * \section protocols_sec Protocols and Standards
 *
 * The project adheres to specific protocols for communication and game mechanics, ensuring
 * consistency and functionality across all components.
 *
 * For more detailed information, please refer to the individual sections and files included in this documentation.
 */
